import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as spi

# –§—É–Ω–∫—Ü—ñ—è
def f(x):
    return x ** 2

# –ú–µ–∂—ñ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è
a = 0
b = 2

# 1. –ú–µ—Ç–æ–¥ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ
N = 100_000  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Ç–æ—á–æ–∫
x_random = np.random.uniform(a, b, N)
f_values = f(x_random)
monte_carlo_integral = (b - a) * np.mean(f_values)

# 2. –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–ª—è f(x) = x^2: ‚à´x^2 dx = x^3/3)
analytical_integral = (b**3 - a**3) / 3

# 3. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è SciPy (quad)
quad_integral, quad_error = spi.quad(f, a, b)

# –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
print("üîπ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ —ñ–Ω—Ç–µ–≥—Ä–∞–ª:", monte_carlo_integral)
print("üîπ –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞–ª:", analytical_integral)
print("üîπ Quad —ñ–Ω—Ç–µ–≥—Ä–∞–ª:", quad_integral, "| –ü–æ—Ö–∏–±–∫–∞:", quad_error)

# –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
x = np.linspace(-0.5, 2.5, 400)
y = f(x)

fig, ax = plt.subplots()
ax.plot(x, y, 'r', label='f(x) = x^2', linewidth=2)
ix = np.linspace(a, b)
iy = f(ix)
ax.fill_between(ix, iy, color='gray', alpha=0.3, label='–ü–ª–æ—â–∞ –ø—ñ–¥ –∫—Ä–∏–≤–æ—é')

ax.set_xlim([x[0], x[-1]])
ax.set_ylim([0, max(y) + 0.1])
ax.set_xlabel('x')
ax.set_ylabel('f(x)')
ax.axvline(x=a, color='gray', linestyle='--')
ax.axvline(x=b, color='gray', linestyle='--')
ax.set_title('–Ü–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è f(x) = x^2 –≤—ñ–¥ 0 –¥–æ 2')
ax.legend()
plt.grid()
plt.show()